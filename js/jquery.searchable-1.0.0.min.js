/*! jQuery Searchable v1.0.0 by Stidges (http://twitter.com/stidges) | MIT */
! function(a) {
    function b(b, c) {
        this.$element = a(b), this.settings = a.extend({}, d, c), this.init()
    }
    var c = "searchable",
        d = {
            selector: "tbody tr",
            childSelector: "td",
            searchField: "#search",
            striped: !1,
            oddRow: {},
            evenRow: {},
            hide: function(a) {
                a.hide()
            },
            show: function(a) {
                a.show()
            },
            searchType: "default"
        };
    b.prototype = {
        init: function() {
            this.$searchElems = a(this.settings.selector, this.$element), this.$search = a(this.settings.searchField), this.matcherFunc = this.getMatcherFunction(this.settings.searchType), this.bindEvents(), this.updateStriping()
        },
        
        updateStriping: function() {
            var b = this,
                c = ["oddRow", "evenRow"],
                d = this.settings.selector + ":visible";
            this.settings.striped && a(d, this.$element).each(function(d, e) {
                a(e).css(b.settings[c[d % 2]])
            })
        },
        
        getMatcherFunction: function(a) {
            return "fuzzy" === a ? this.getFuzzyMatcher : "strict" === a ? this.getStrictMatcher : this.getDefaultMatcher
        },
        getFuzzyMatcher: function(a) {
            var b, c = a.split("").reduce(function(a, b) {
                return a + "[^" + b + "]*" + b
            });
            return b = new RegExp(c, "gi"),
                function(a) {
                    return b.test(a)
                }
        },
        getStrictMatcher: function(b) {
            return b = a.trim(b),
                function(a) {
                    return -1 !== a.indexOf(b)
                }
        },
        getDefaultMatcher: function(b) {
            return b = a.trim(b).toLowerCase(),
                function(a) {
                    return -1 !== a.toLowerCase().indexOf(b)
                }
        }
    }, a.fn[c] = function(d) {
        return this.each(function() {
            a.data(this, "plugin_" + c) || a.data(this, "plugin_" + c, new b(this, d))
        })
    }
}(jQuery, window, document);